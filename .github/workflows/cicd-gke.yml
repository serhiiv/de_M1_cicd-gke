# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Simple flask app

on:
  push:
    branches: 
      - 'main'
  pull_request:
    branches: 'main'


jobs:

  tests:
    name: Tests
    runs-on: ubuntu-latest

    steps:

    - 
      name: Checkout repository
      uses: actions/checkout@v4

    - 
      name: Set up Python 3.12.3
      uses: actions/setup-python@v3
      with:
        python-version: "3.12.3"

    - 
      name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - 
      name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 flasky/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
     
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 flasky/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        flake8 tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - 
      name: Test with pytest
      run: |
        python -m pytest


  build:
    name: Build
    needs: tests
    runs-on: ubuntu-latest

    steps:

    - 
      name: Checkout repository
      uses: actions/checkout@v4

    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    -
      name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    -
      name: Build and push
      uses: docker/build-push-action@v6
      with:
        push: true
        tags: ${{ vars.DOCKERHUB_USERNAME }}/cicd-gke:${{ github.sha }}, ${{ vars.DOCKERHUB_USERNAME }}/cicd-gke:latest


  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write 
      
    env:
      PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
      GKE_REGION: ${{ vars.GKE_REGION }}
      GKE_CLUSTER: ${{ vars.GKE_CLUSTER }}

    steps:
      - 
        name: Checkout repository
        uses: actions/checkout@v4

      - 
        name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2

      - 
        name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - 
        name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: "gke-gcloud-auth-plugin"
      
      - name: Authenticate to GKE cluster
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ vars.GKE_CLUSTER }}
          location: ${{ vars.GKE_REGION }}

      - 
        name: Check gke-gcloud-auth-plugin
        run: |
          gke-gcloud-auth-plugin --version

      - 
        name: Get the GKE credentials so we can deploy to the cluster
        run: |
          gcloud container clusters get-credentials ${{ vars.GKE_CLUSTER }} --region ${{ vars.GKE_REGION }}

  #     - 
  #       name: Create namespace & set in Kustomize
  #       run: |
  #         namespacePresentBlue=`kubectl get ns | grep cicd-gke-blue | wc -l`
  #         namespacePresentGreen=`kubectl get ns | grep cicd-gke-green | wc -l`
  #         if [ $namespacePresentBlue -eq 0 ]
  #         then
  #             kubectl create ns cicd-gke-blue
  #             cd k8s
  #             kustomize edit set namespace cicd-gke-blue
  #             kustomize edit set label app:cicd-gke-blue
  #             echo "NEW_NAMESPACE=cicd-gke-blue" >> $GITHUB_ENV
  #             echo "OLD_NAMESPACE=cicd-gke-green" >> $GITHUB_ENV
  #         elif [ $namespacePresentGreen -eq 0 ] 
  #         then
  #             kubectl create ns cicd-gke-green
  #             cd k8s
  #             kustomize edit set namespace cicd-gke-green
  #             kustomize edit set label app:cicd-gke-green
  #             echo "NEW_NAMESPACE=cicd-gke-green" >> $GITHUB_ENV
  #             echo "OLD_NAMESPACE=cicd-gke-blue" >> $GITHUB_ENV
  #         else
  #             echo "Both Blue and Green namespaces are present! Exiting"
  #             exit 1
  #         fi

  #     - 
  #       name: Update Kubernetes resources
  #       run: |
  #         cd k8s
  #         kustomize edit set image cicd-gke=${{ vars.DOCKERHUB_USERNAME }}/cicd-gke:${{ github.sha }}
  #         cat kustomization.yaml

  #     - 
  #       name: Deploy updated Kubernetes resources
  #       run: |
  #         kubectl apply -k k8s/

  #     - 
  #       name: REMOVE OLD DEPLOYMENT!!
  #       run: |
  #         namespacePresentOld=`kubectl get ns | grep ${{ env.OLD_NAMESPACE }} | wc -l`
  #         if [ $namespacePresentOld -eq 1 ]
  #         then
  #           kubectl delete ns ${{ env.OLD_NAMESPACE }} --wait=true
  #         fi

  #     - 
  #       name: Commit files
  #       run: |
  #         git config --local user.email "action@github.com"
  #         git config --local user.name "GitHub Action"
  #         git commit -am "Bump docker tag!"

  #     - 
  #       name: Push changes
  #       uses: ad-m/github-push-action@master
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}